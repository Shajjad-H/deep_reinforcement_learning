Dans le premier temps, dans le premier génocide,
nous ne trouvames, que des corps vide,
nous étions là, debout sur les tombes, en attendant notre retombe,
et nous voyames un autre, debout sur les hécatombe,
il était d'une puissance indescriptible,
le feu le brulait, mais il ne le sentait,
armé seulement de ses poins et de son épée,
nul démon, pouvait le faire face,
il était seul face a ces créatures,
seul, face a ces milliards de démons enragés,
il n'u aucune lâcheté, il les a avait tous exterminer,
il n'y avait qu'une seul vie dominante dans tout cette univers,
il n'y avait qu'une seul chose dont-ils avaient ont peur...le DOOM SLAYER


Partie 2 : Shallow network

Quantifier l’influence des différents hyper-paramètres (en particulier η, les poids initiaux et le nombre de neurones de la couche cachée).
Les paramètres comme η et les poids initiaux ont la même influence que la partie précédent.
Dans cette partie, c'est le nombre de neurones cachés qui peut influencer la performance du réseau. Pour l’étudier, nous avons décidé de mettre des tailles très petites et très grandes.
Par exemple, en mettant la taille à 5 le réseau ne dépasse pas 30% de succès. C’est sûrement à cause de la réduction trop importante des informations. Et de l’autre côté même si en mettant la taille à 2000 on atteint 85% on peut obtenir les résultats voir meilleur avec une taille à 350 mais avec une meilleure performance.

Fichier d'implémentation: 
	'shallow_network.py' : Utilisant que les tenseur
	`shallow_network_pytorch.py`:  Utilisant les outils de Pytorch (avec modele Sequential)
	`shallow_network_module.py`: Utilisant les outils de Pytorch (avec approche objet orienté)



Partie 3 :  Deep network

Fichier d'implémentation:
	`deep_net_pytorch.py` contient un modèle séquentiel avec une couche d’entrée, une couche de sortie et deux couches cachées au milieu avec des fonctions d’activation.
